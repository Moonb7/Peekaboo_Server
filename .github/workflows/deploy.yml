name: Deploy to Amazon ECR and EC2

on:
  push:
    branches: ['dockerTest']

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      # 1. Git Checkout
      - name: Checkout
        uses: actions/checkout@v3

      # 2. AWS 인증 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 3. Amazon ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 4. MSA용 .env 파일 생성
      - name: Create .env for MSA
        run: |
          echo "${{ secrets.MSA_ENV }}" > ./packages/common/config/.env

      # 5. Dedicated용 .env 파일 생성
      - name: Create .env for Dedicated
        run: |
          echo "${{ secrets.DEDICATED_ENV }}" > ./apps/game/dedicated/src/constants/.env

      # 6. Docker 이미지 빌드 및 푸시
      - name: Build and push images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # 분산 서버 빌드 및 푸시
          services=("distributor" "game" "lobby" "account" "session" "gateway")
          for service in "${services[@]}"; do
            echo "Building and pushing $service..."
            docker buildx build \
              --platform linux/amd64 \
              -t $ECR_REGISTRY/test-node:$service-$IMAGE_TAG \
              -t $ECR_REGISTRY/test-node:$service-latest \
              -f apps/$service/dockerfile .
            
            docker push $ECR_REGISTRY/test-node:$service-$IMAGE_TAG
            docker push $ECR_REGISTRY/test-node:$service-latest
          done

          # Dedicated 서버 빌드 및 푸시
          echo "Building and pushing Dedicated server..."
          docker buildx build \
            --platform linux/amd64 \
            -t $ECR_REGISTRY/test-node:dedicated-$IMAGE_TAG \
            -t $ECR_REGISTRY/test-node:dedicated-latest \
            -f apps/game/dedicated/dockerfile .

          docker push $ECR_REGISTRY/test-node:dedicated-$IMAGE_TAG
          docker push $ECR_REGISTRY/test-node:dedicated-latest

      # 7. EC2로 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            cd /home/ubuntu/app

            # 분산 서버 실행
            echo "Starting distributed services..."
            docker-compose --env-file ./packages/common/config/.env down
            docker-compose --env-file ./packages/common/config/.env pull
            docker-compose --env-file ./packages/common/config/.env up -d

            # Dedicated 서버 실행
            echo "Starting Dedicated server..."
            docker-compose --env-file ./apps/game/dedicated/src/constants/.env down
            docker-compose --env-file ./apps/game/dedicated/src/constants/.env pull
            docker-compose --env-file ./apps/game/dedicated/src/constants/.env up -d
