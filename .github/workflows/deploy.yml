name: Deploy to Amazon ECR and EC2

on:
  push:
    branches: ['dockerTest']

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # .env 파일들 생성
      - name: Create .env files
        run: |
          echo "${{ secrets.MSA_ENV }}" > ./packages/common/config/.env
          echo "${{ secrets.DEDICATED_ENV }}" > ./apps/game/dedicated/src/constants/.env

      # Docker 이미지 빌드 및 푸시
      - name: Build and push images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # MSA 서비스들 빌드 및 푸시
          services=("distributor" "game" "lobby" "account" "session" "gateway")

          for service in "${services[@]}"; do
            echo "Building $service..."
            dockerfile_path="apps/$service/Dockerfile"
            
            if [ "$service" == "game" ]; then
              dockerfile_path="apps/game/master/Dockerfile"
            fi

            docker build \
              -t $ECR_REGISTRY/test-node:$service-latest \
              -f $dockerfile_path .
            
            docker push $ECR_REGISTRY/test-node:$service-latest
          done

          # Dedicated 서버 빌드 및 푸시
          echo "Building dedicated server..."
          docker build \
            -t $ECR_REGISTRY/test-node:dedicated-latest \
            -f apps/game/dedicated/Dockerfile .

          docker push $ECR_REGISTRY/test-node:dedicated-latest

      # EC2 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/app

            # ECR 로그인
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

            # 환경 변수 파일 생성
            mkdir -p packages/common/config
            echo "ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY }}" > packages/common/config/.env
            echo "${{ secrets.MSA_ENV }}" >> packages/common/config/.env

            # Docker Compose 실행 (하이픈 추가)
            docker-compose down
            docker-compose pull
            docker-compose up -d
