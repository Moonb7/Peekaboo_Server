name: Deploy to Amazon ECR and EC2

on:
  push:
    branches: ['dockerTest']

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service:
          [distributor, game, lobby, account, session, gateway, dedicated]
        # 각 서비스별로 병렬 실행

    steps:
      # 1. Git Checkout
      - name: Checkout
        uses: actions/checkout@v3

      # 2. AWS 인증 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 3. Amazon ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 4. MSA용 .env 파일 생성
      - name: Create .env for MSA
        run: |
          echo "${{ secrets.MSA_ENV }}" > ./packages/common/config/.env

      # 5. Dedicated용 .env 파일 생성
      - name: Create .env for Dedicated
        run: |
          echo "${{ secrets.DEDICATED_ENV }}" > ./apps/game/dedicated/src/constants/.env

      # 6. Docker 이미지 빌드 및 푸시 (Matrix 사용)
      - name: Build and push ${{ matrix.service }} image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building and pushing ${{ matrix.service }}..."
          if [ "${{ matrix.service }}" == "game" ]; then
            # game 서비스의 Dockerfile 경로는 다르므로 따로 지정
            docker buildx build \
              --platform linux/amd64 \
              -t $ECR_REGISTRY/test-node:${{ matrix.service }}-$IMAGE_TAG \
              -t $ECR_REGISTRY/test-node:${{ matrix.service }}-latest \
              -f apps/game/master/Dockerfile .
          else
            docker buildx build \
              --platform linux/amd64 \
              -t $ECR_REGISTRY/test-node:${{ matrix.service }}-$IMAGE_TAG \
              -t $ECR_REGISTRY/test-node:${{ matrix.service }}-latest \
              -f apps/${{ matrix.service }}/Dockerfile .
          fi
          docker push $ECR_REGISTRY/test-node:${{ matrix.service }}-$IMAGE_TAG
          docker push $ECR_REGISTRY/test-node:${{ matrix.service }}-latest

      # 7. EC2로 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT}}
          script: |
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            # EC2에서 작업할 디렉토리 생성
            mkdir -p /home/ubuntu/app
            cd /home/ubuntu/app

            # docker-compose 파일이 있는지 확인 후 실행
            if [ -f docker-compose.yml ]; then
              echo "docker-compose.yml found, starting services..."
              docker-compose --env-file ./packages/common/config/.env down
              docker-compose --env-file ./packages/common/config/.env pull
              docker-compose --env-file ./packages/common/config/.env up -d
            else
              echo "docker-compose.yml not found!"
            fi

            # Dedicated 서버 실행
            if [ -f ./apps/game/dedicated/src/constants/docker-compose.yml ]; then
              echo "Starting Dedicated server..."
              docker-compose --env-file ./apps/game/dedicated/src/constants/.env down
              docker-compose --env-file ./apps/game/dedicated/src/constants/.env pull
              docker-compose --env-file ./apps/game/dedicated/src/constants/.env up -d
            else
              echo "Dedicated docker-compose.yml not found!"
            fi
